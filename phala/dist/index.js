(()=>{"use strict";class e{constructor(e){this.body=e.body,this.queries=e.queries,this.headers=e.headers,this.method=e.method,this.path=e.path,this.secret=e.secret}async json(){return JSON.parse(this.body)}}class t{constructor(e,t){this.status=t?.status??200,this.body=e,this.headers={"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...t?.headers}}}async function s(e){let s={message:""};e.secret;const o=e.queries;o.chatQuery&&o.chatQuery[0];console.log("query",e.path),console.log("reqQuery",e.queries);try{const e=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":"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","anthropic-version":"2023-06-01"},body:JSON.stringify({messages:[{role:"user",content:"What is a good idea for a memecoin? give me a json object with name, symbol, and description"}],model:"claude-3-5-sonnet-20240620",max_tokens:1024})}),t=await e.json();console.log("responsedata",t),s.message=t.content[0]?.text||"Failed to get result"}catch(e){console.error("Error fetching chat completion:",e),s.message=e instanceof Error?e.message:"An unknown error occurred"}return new t(JSON.stringify(s))}async function o(e){let s={message:""};e.secret;const o=e.queries,n=(o.chatQuery&&o.chatQuery[0],await e.json());console.log("Body",JSON.stringify(n));const a=`Generate a static website for my meme coin named ${JSON.stringify(n.name)} with the symbol ${JSON.stringify(n.symbol)}. The website should have a ${JSON.stringify(n.img)} image and a description of ${JSON.stringify(n.description)}, Create some about us content based on the description. make sure the output is only the file needed to deploy the site and is ready to be copypasted into an html file`;try{const e=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"text/html","x-api-key":"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","anthropic-version":"2023-06-01"},body:JSON.stringify({messages:[{role:"user",content:a}],model:"claude-3-5-sonnet-20240620",max_tokens:1024})}),t=await e.json();s.message=t.content[0]?.text||"Failed to get result",console.log(s.message)}catch(e){console.error("Error fetching chat completion:",e),s.message=e instanceof Error?e.message:"An unknown error occurred"}const r=function(e){const t=e.match(/<html[\s\S]*<\/html>/);if(!t)throw new Error("No valid HTML content found");return t[0].replace(/\n/g,"")}(s.message);console.log("deployableHTML",r);let i;try{const e=await fetch("$https://publisher.walrus-testnet.walrus.space/v1/store?epochs=5",{method:"PUT",body:r});if(!e.ok)throw new Error(`Error with: ${e.statusText}`);const t=await e.json();console.log("Success with :",t),i=t}catch(e){console.error(`Attempt failed: ${e}`)}const c=`https://testnet-aggregator-walrus.kiliglab.io/v1/${i?.alreadyCertified?.blobId}`;return new t(JSON.stringify(c))}(async function(n){return await async function(s,o){const n=JSON.parse(o);let a;const r=n.method,i=new e(n);return"GET"==r&&s.GET?a=await s.GET(i):"POST"==r&&s.POST?a=await s.POST(i):"PATCH"==r&&s.PATCH?a=await s.PATCH(i):"PUT"==r&&s.PUT?a=await s.PUT(i):(a=new t("Not Found"),a.status=404),JSON.stringify(a)}({GET:s,POST:o},n)}).apply(null,globalThis.scriptArgs).then((e=>globalThis.scriptOutput=e)).catch((e=>globalThis.scriptOutput=JSON.stringify({error:e,success:!1})))})();